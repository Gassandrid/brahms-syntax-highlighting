{
  "name": "Brahms",
  "scopeName": "source.brahms",
  "fileTypes": ["b"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#agent_declarations" },
    { "include": "#group_declarations" },
    { "include": "#workframe_declarations" }, 
    { "include": "#beliefs" },
    { "include": "#actions" },
    { "include": "#foreach_loop" },
    { "include": "#workframe_and_variables" },
    { "include": "#operators" }, 
    { "include": "#storage-modifier" },
    { "include": "#storage-class" },
    { "include": "#storage-type"}
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.brahms",
          "match": "\\b(class|agent|group|object|workframe|attributes|variables|initial_beliefs|conclude|CreateAgent|delete|instanceof|memberof|when|do|not)\\b"
        },
        {
          "name": "keyword.loop.brahms",
          "match": "\\b(foreach)\\b"
        },
        {
          "name": "keyword.action.brahms",
          "match": "\\b(sing|conclude|CreateAgent|delete)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.brahms",
          "match": "\\b(and|or)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.brahms",
          "match": "//.*$"
        },
        {
          "name": "comment.block.brahms",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.brahms",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.brahms",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.brahms",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "agent_declarations": {
      "patterns": [
        {
          "name": "entity.name.type.agent.brahms",
          "match": "\\bagent\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "entity.name.agent.brahms" }
          }
        }
      ]
    },
    "group_declarations": {
      "patterns": [
        {
          "name": "entity.name.type.group.brahms",
          "match": "\\bgroup\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "entity.name.group.brahms" }
          }
        }
      ]
    },
    "workframe_declarations": {
      "patterns": [
        {
          "name": "entity.name.type.workframe.brahms",
          "match": "\\bworkframe\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "entity.name.workframe.brahms" }
          }
        }
      ]
    },
    "beliefs": {
      "patterns": [
        {
          "name": "keyword.control.belief.brahms",
          "match": "\\b(current|initial_beliefs|beliefs|performs|has_performed)\\b"
        },
        {
          "name": "meta.belief-expression.brahms",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "name": "variable.brahms",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            },
            {
              "name": "constant.brahms",
              "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
            },
            {
              "name": "keyword.operator.brahms",
              "match": "[=()]"
            }
          ]
        }
      ]
    },
    "actions": {
      "patterns": [
        {
          "name": "keyword.action.brahms",
          "match": "\\b(sing|conclude|CreateAgent|delete)\\b"
        },
        {
          "name": "meta.action-expression.brahms",
          "match": "\\(([^)]+)\\)"
        }
      ]
    },
    "foreach_loop": {
      "patterns": [
        {
          "name": "meta.foreach-loop.brahms",
          "begin": "\\bforeach\\s*\\(",
          "end": "\\)\\s*;",
          "patterns": [
            {
              "name": "keyword.loop.brahms",
              "match": "\\bforeach\\b"
            },
            {
              "name": "storage.type.brahms",
              "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\))"
            },
            {
              "name": "variable.brahms",
              "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=;)"
            }
          ]
        },
        {
          "name": "meta.foreach-condition.brahms",
          "begin": "\\bwhen\\b",
          "end": "\\bdo\\s*\\{",
          "patterns": [
            {
              "name": "keyword.control.condition.brahms",
              "match": "\\bwhen\\b|\\bdo\\b|\\band\\b|\\bnot\\b"
            },
            {
              "name": "variable.brahms",
              "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
            },
            {
              "name": "keyword.operator.brahms",
              "match": "[=()]"
            }
          ]
        },
        {
          "name": "meta.foreach-action.brahms",
          "begin": "\\bdo\\s*\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "keyword.action.brahms",
              "match": "\\b(sing|conclude|CreateAgent|delete)\\b"
            },
            {
              "name": "variable.brahms",
              "match": "\\b[a-zA-Z_][A-Za-z0-9_]*\\b(?=\\))"
            },
            {
              "name": "constant.brahms",
              "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
            }
          ]
        }
      ]
    },
    "workframe_and_variables": {
      "patterns": [
        {
          "name": "keyword.declaration.brahms",
          "match": "\\b(workframes|variables|attributes)\\b"
        },
        {
          "name": "entity.name.function.workframe.brahms",
          "match": "\\bworkframe\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "entity.name.workframe.brahms" }
          }
        },
        {
          "name": "entity.name.variable.brahms",
          "match": "\\b(Song|a_song|current)\\b"
        }
      ]
    },
    "storage-modifier": {
      "patterns": [
        {
          "name": "storage.modifier.brahms",
          "match": "\\b(public|private|protected|static|final|abstract|synchronized|volatile|transient|native|strictfp)\\b"
        }
      ]
    },
    "storage-class": {
      "patterns": [
        {
          "name": "storage.class.brahms",
          "match": "\\b(class|interface|enum|@interface)\\b"
        }
      ]
    },
    "storage-type": {
      "patterns": [
        {
          "name": "storage.type.brahms",
          "match": "\\b(void|boolean|char|byte|short|int|long|float|double)\\b"
        }
      ]
    }
  }
}
